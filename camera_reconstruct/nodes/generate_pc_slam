#!/usr/bin/env python3

import rospy
import tf2_ros
import tf2_py as tf2
from tf_conversions import transformations
from tf2_sensor_msgs.tf2_sensor_msgs import do_transform_cloud
from sensor_msgs.msg import PointCloud2
from geometry_msgs.msg import TransformStamped, Quaternion
from camera_reconstruct.srv import save_pc
from math import pi

class GeneratePC:
    '''
    Services:       save_pc - outputs a single PointCloud2 message from Realsense
    Subscribers:    /camera/depth/color/points - PointCloud2 messages from realsense
    Publishers:     pc_pub - publishes PointCloud2 messages to /saved_pcs
    Broadcasts:     static transfrom from right_gripper_l_finger_tip to camera_link
    '''
    def __init__(self):
        '''
        Constructor of GeneratePC class
        initializes attributes, subscribers, broadcasters, and services
        '''
        #initialize attributes
        self.cur_pc = PointCloud2()     #current pointcloud from realsense
        self.pc_list = []               #list of saved pointclouds

        #initialize subscribers
        rospy.sleep(5)                  #wait for realsense to launch
        rospy.Subscriber('/camera/depth/color/points',PointCloud2,self.pc_callback)

        #initialize publishers
        self.pc_pub = rospy.Publisher('saved_pcs',PointCloud2,queue_size=10,latch=True)

        #initialize services
        self.save_pc = rospy.Service('generate_pc/save_pc',save_pc,self.savepc_callback)





        #at home
        self.pc_br = tf2_ros.TransformBroadcaster()
        self.static_broadcaster_world = tf2_ros.StaticTransformBroadcaster()
        self.world_tf = TransformStamped()
        self.world_tf.header.stamp = rospy.Time.now()
        self.world_tf.header.frame_id = 'camera_depth_optical_frame'
        self.world_tf.child_frame_id = 'object'
        self.world_tf.transform.translation.x = 0
        self.world_tf.transform.translation.y = 0
        self.world_tf.transform.translation.z = 0.5
        q_world = transformations.quaternion_about_axis(0.0,[0,0,1])
        self.world_tf.transform.rotation = Quaternion(*q_world)
        self.static_broadcaster_world.sendTransform(self.world_tf)

        #initialize transform listener
        self.tf_buffer = tf2_ros.Buffer()
        self.tf_listener = tf2_ros.TransformListener(self.tf_buffer)

        self.rotang_arr = [0,pi/2,pi,-pi/2]
        self.x_arr = [0,-0.5,0.0,0.5]
        self.z_arr = [-0.5,0.0,0.5,0.0]
        self.rot_index = 0
    def pc_callback(self,pc):
        '''
        subscriber callback function
        transforms most recent PointCloud2 message to object_rot frame
        updates self.cur_pc to transformed PointCloud2 message
        '''


        new_pc_frame = TransformStamped()
        new_pc_frame.header.stamp = rospy.Time.now()
        new_pc_frame.header.frame_id = 'object'
        new_pc_frame.child_frame_id = 'object_rot'
        new_pc_frame.transform.translation.x = self.x_arr[self.rot_index]
        new_pc_frame.transform.translation.y = 0
        new_pc_frame.transform.translation.z = self.z_arr[self.rot_index]

        q1 = transformations.quaternion_about_axis(self.rotang_arr[self.rot_index],[0,1,0])
        new_pc_frame.transform.rotation = Quaternion(*q1)
        self.pc_br.sendTransform(new_pc_frame)


        cloud_out = do_transform_cloud(pc,new_pc_frame)

        #update attribute
        self.cur_pc = cloud_out

    def savepc_callback(self,emp):
        '''
        save_pc callback function
        saves PointCloud2 message in pc_list
        args:
            emp: empty variable
        returns:
            mypc: saved PointCloud2 message
        '''

        if self.rot_index > (len(self.rotang_arr)-2):
            self.rot_index = 0
        else:
            self.rot_index += 1



        mypc = self.cur_pc
        self.pc_pub.publish(mypc)
        self.pc_list.append(mypc)
        return mypc

def main():
    '''
    initialize node and create GeneratePC object
    '''
    rospy.init_node('generate_pc')
    gpc = GeneratePC()
    rospy.spin()

if __name__ == "__main__":
    try:
        main()
    except rospy.ROSInterruptException:
        pass