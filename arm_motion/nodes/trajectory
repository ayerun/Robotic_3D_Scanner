#!/usr/bin/env python

""" 
This node controls the turtblebot to follow a trajectory

PUBLISHERS:
  + <cmd_vel> (<Twist>) ~ the velocity of the turtlebot
  + <path> (<Path>) ~ the open-loop expected trajectory of the robot

BROADCASTS:
  + <tf_static> (<StaticTransformBroadcaster>) ~ Transform odom frame in world frame
  + <tf> (<TransformStamped>) ~ Transform turtblebot frame in odom frame

SERVICES:
  + <pause> (<Empty>) ~ stop the turtle's motion (not resetting)
  + <resume> (<Empty>) ~ resume the turtle's motion along the trajectory

PARAMETERS:
  + <width> (<float>) ~ width of the figure eight trajectory
  + <height> (<float>) ~ height of the figure eight trajectory
  + <period> (<float>) ~ period of the figure eight trajectory
 
"""

import rospy
import math
import tf2_ros
from tf_conversions import transformations
from geometry_msgs.msg import Twist, Point, Pose, Quaternion, PoseStamped, TransformStamped
from nav_msgs.msg import Path, Odometry
from std_srvs.srv import Empty, EmptyResponse

class Trajectory:
    def __init__(self, freq):
        """Init a trajectory object that create trajectory for the robot
            Args:
                frequency (float) - ros publisher frequency
        """
        #trajectory time
        self.t = 0
        self.update = False
        self.dt = 1.0/freq


        #service init
        self.pause_srv = rospy.Service("pause", Empty, self.pause_callback)
        self.resume_srv = rospy.Service("resume", Empty, self.resume_callback)


    def pause_callback(self,emp):
        """Callback function to pause tje robot for the <pause> service
            Args:
                empty (Empty) - empty message
            Returns:
                empty (EmptyResponse) - returns empty
        """

        self.update = False
        return EmptyResponse()

    def resume_callback(self,emp):
        """Callback function to resume the robot for the <resume> service
            Args:
                empty (Empty) - empty message
            Returns:
                empty (EmptyResponse) - returns empty
        """
        self.update = True
        return EmptyResponse()

    def t_increase(self):
        """This function decides whether trajectory should continue drawing or not
        """
        self.t += self.dt


class TurtleBot:
    def __init__(self):
        """Init a trajectory object that create trajectory for the robot
        """

        #init publisher
        self.pub_vel = rospy.Publisher('/cmd_vel', Twist, queue_size = 10)

    def update_velocity(self):
        """Publishing new calculated velocity to <cmd_vel>
            Args:
        """

        v = 0.0
        omega = 0.5

        #rospy.loginfo(str(omega))
        vel = Twist()
        vel.linear.x = v
        vel.angular.z = omega
        self.pub_vel.publish(vel)


def main():
    """ The main() function. """
    #ros node init
    rospy.init_node('trajectory')
    pub_freq = 50
    r = rospy.Rate(pub_freq)
    rospy.sleep(1.0)

    traj = Trajectory(pub_freq)

    turtle = TurtleBot()

    rospy.sleep(1.0)
    while not rospy.is_shutdown():
        
        if traj.update:
            traj.t_increase()
            print(traj.t)
            turtle.update_velocity()
        else:
            print(traj.t)
            turtle.pub_vel.publish(Twist())
        r.sleep()


if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass
