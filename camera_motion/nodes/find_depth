#!/usr/bin/env python


import rospy
import math
import cv2
from cv_bridge import CvBridge
from sensor_msgs.msg import Image
from std_msgs.msg import Float32
class Depth_Processor:
    """ Process the images """
    def __init__(self):
        self._bridge = CvBridge()
        self._sub = rospy.Subscriber("camera/depth/image_rect_raw", Image, self.callback)
        self._pub = rospy.Publisher("camera_motion_depth", Float32 , queue_size=10)
        self.kernel = 2 #has to be an even number
        self.time_avg = 50
        self.time_queue = []

    def callback(self, data):
        """ Callback for processing an image
    
        Args: 
            data (sensor_msgs/Image) the raw image from the camera
        """
        # convert to open cv
        cv_image = self._bridge.imgmsg_to_cv2(data, "16UC1")
        img_width = len(cv_image)
        img_height = len(cv_image[1])

        mid_width = int(img_width/2)
        mid_height = int(img_height/2)

        depth_sum = 0
        count_pixel = 0
        for i in range(mid_width-int(self.kernel/2),mid_width+int(self.kernel/2)):
            for j in range(mid_height-int(self.kernel/2),mid_height+int(self.kernel/2)):
                count_pixel += 1
                depth_sum += cv_image[i][j]

        
        avg_depth_space = depth_sum/count_pixel

        if len(self.time_queue) >= self.time_avg:
            self.time_queue.pop(0)

        self.time_queue.append(avg_depth_space)

        avg_depth_time = sum(self.time_queue)/len(self.time_queue)
            

        avg_depth = int(avg_depth_time)
        self._pub.publish(avg_depth)




def main():
    """ The main() function. """
    rospy.init_node('find_depth')
    r = rospy.Rate(50)

    p = Depth_Processor()
    while not rospy.is_shutdown():
        r.sleep()



if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass